- name: "Instalation loadbalancer Nginx "
  hosts: lbservers
  become: true
  vars_files:
    - ./vars/secret-variables.yaml
  pre_tasks:
    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: true

  tasks:

    - name: Upload httpd.conf
      copy:
        src: ./NginxConf/default.conf
        dest: /home/admin/NginxConf/default.conf

    - name: Create Nginx Container
      community.docker.docker_container:
        name: srv-lb1-proxy
        image: nginx:alpine
        ports:
          - "80:80"
        volumes:
          - ./NginxConf/default.conf:/usr/share/nginx/conf.d/default.conf:ro

- name: "Instalation des deux serveurs srv-web1, web2"
  hosts: webservers
  become: true
  vars_files:
    - ./vars/secret-variables.yaml
  pre_tasks:
    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: true

  tasks:

    - name: Create Frontend Network
      community.docker.docker_network:
        name: frontend
        state: present

    - name: Create Backend Network
      community.docker.docker_network:
        name: backend
        state: present

    - name: Create Persistent MySQL Volume
      community.docker.docker_volume:
        name: mysql_data

    - name: Uploade index.php
      copy:
        src: ./html/index.php
        dest: /home/admin/html/index.php

    - name: Upload httpd.conf
      copy:
        src: ./HttpdConf/httpd.conf
        dest: /home/admin/HttpdConf/httpd.conf

    - name: Create PHP-FPM Container
      community.docker.docker_container:
        name: php-container
        image: php:fpm-alpine
        ports:
          - "9000:9000"
        volumes:
          - ./html:/srv/htdocs
        state: started
        networks:
          - backend

    - name: Create Apache Container
      community.docker.docker_container:
        name: apache2-container
        image: httpd:alpine
        ports:
          - "80:80"
        volumes:
          - ./html:/usr/local/apache2/htdocs
          - ./HttpdConf/httpd.conf:/usr/local/apache2/conf/httpd.conf
        state: started
        networks:
          - frontend
          - backend

    - name: Create MySQL Container
      community.docker.docker_container:
        name: mysql-container
        image: mysql:latest
        ports:
          - "3306:3306"
        volumes:
          - mysql_data:/var/lib/mysql
        environment:
          MYSQL_ROOT_PASSWORD: rootpassword
        state: started
        networks:
          - backend
